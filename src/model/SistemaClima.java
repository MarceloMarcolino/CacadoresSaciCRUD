package model;

/**
 * Sistema de Clima aprimorado baseado na documenta√ß√£o completa
 * Baseado na p√°gina 75 da documenta√ß√£o:
 * 
 * "O clima aqui n√£o √© apenas um detalhe de fundo, mas sim uma ferramenta
 * estrat√©gica nas m√£os habilidosas de um Saci e seu ca√ßador!"
 */
public class SistemaClima {
    private CondicaoClimatica climaAtual;
    private int rodadasRestantes;
    private boolean permanente;
    
    public SistemaClima() {
        this.climaAtual = CondicaoClimatica.NORMAL;
        this.rodadasRestantes = 0;
        this.permanente = false;
    }
    
    /**
     * Muda o clima do campo de batalha
     * @param novoClima O novo clima a ser aplicado
     * @param duracao Dura√ß√£o em rodadas (0 = permanente)
     */
    public void mudarClima(CondicaoClimatica novoClima, int duracao) {
        this.climaAtual = novoClima;
        this.rodadasRestantes = duracao;
        this.permanente = (duracao == 0);
    }
    
    /**
     * Processa o fim de uma rodada
     * @return true se o clima mudou para Normal
     */
    public boolean processarRodada() {
        if (permanente || climaAtual == CondicaoClimatica.NORMAL) {
            return false;
        }
        
        rodadasRestantes--;
        if (rodadasRestantes <= 0) {
            climaAtual = CondicaoClimatica.NORMAL;
            return true;
        }
        
        return false;
    }
    
    /**
     * Verifica se um Saci pode ser afetado por uma condi√ß√£o espec√≠fica
     * Baseado nos efeitos clim√°ticos da documenta√ß√£o
     */
    public boolean podeSerAfetadoPorCondicao(String condicao) {
        switch (climaAtual) {
            case ENSOLARADO:
                // "Ningu√©m pode ser Congelado enquanto esse clima estiver em campo"
                return !condicao.equals("Congelado");
                
            case CHUVOSO:
                // "Ningu√©m pode ser Queimado enquanto esse clima estiver em campo"
                return !condicao.startsWith("Queimado");
                
            default:
                return true;
        }
    }
    
    /**
     * Calcula b√¥nus de dados em Teste de Ataque baseado no tipo do Saci
     * Conforme documenta√ß√£o p√°gina 75
     */
    public int getBonusDadosAtaque(TipoSaci tipoSaci) {
        switch (climaAtual) {
            case ENSOLARADO:
                // "Todos os Sacis do tipo Valente recebem 1 dado a mais em seu Teste de Ataque"
                return tipoSaci == TipoSaci.VALENTE ? 1 : 0;
                
            case CHUVOSO:
                // "Todos os Sacis do tipo Cativante recebem 1 dado a mais em seu Teste de Ataque"
                return tipoSaci == TipoSaci.CATIVANTE ? 1 : 0;
                
            case NUBLADO:
                // "Todos os Sacis do tipo Sombrio e Ca√≥ticos recebem 1 dado a mais"
                return (tipoSaci == TipoSaci.SOMBRIO || tipoSaci == TipoSaci.CAOTICO) ? 1 : 0;
                
            default:
                return 0;
        }
    }
    
    /**
     * Calcula penalidade de dados para movimentos m√°gicos
     */
    public int getPenalidadeMovimentosMagicos() {
        switch (climaAtual) {
            case TEMPESTUOSO:
                // "Movimentos M√°gicos tem menos 1 dado em Testes de Ataque"
                return -1;
            default:
                return 0;
        }
    }
    
    /**
     * Calcula b√¥nus de atributo baseado no clima
     */
    public int getBonusAtributo(TipoSaci tipoSaci, String atributo) {
        switch (climaAtual) {
            case TEMPESTUOSO:
                // "Sacis do tipo R√≠gido recebem 1 ponto a mais em Resist√™ncia"
                if (tipoSaci == TipoSaci.RIGIDO && atributo.equals("Resistencia")) {
                    return 1;
                }
                break;
            case ENSOLARADO:
            case CHUVOSO: 
            case NUBLADO:
            case NORMAL:
            default:
                break;
        }
        return 0;
    }
    
    /**
     * Calcula dano por clima em Sacis n√£o-R√≠gidos
     */
    public int getDanoPorClima(TipoSaci tipoSaci) {
        switch (climaAtual) {
            case TEMPESTUOSO:
                // "Qualquer Saci que n√£o seja do tipo R√≠gido deve rolar um dado por rodada,
                // se n√£o obtiver um sucesso, ele leva 1 ponto de dano"
                return tipoSaci != TipoSaci.RIGIDO ? 1 : 0;
            case ENSOLARADO:
            case CHUVOSO: 
            case NUBLADO:
            case NORMAL:
            default:
                return 0;
        }
    }
    
    /**
     * Calcula b√¥nus para condi√ß√µes espec√≠ficas
     */
    public int getBonusCondicao(String tipoMovimento) {
        switch (climaAtual) {
            case ENSOLARADO:
                // "Adicione 1 dado a mais em testes que deixem o Saci Queimado"
                if (tipoMovimento.contains("Queimado")) {
                    return 1;
                }
                break;
                
            case NUBLADO:
                // "Adicione 1 dado a mais em Testes de Ataque que deixem o Saci Envenenado"
                if (tipoMovimento.contains("Envenenado")) {
                    return 1;
                }
                break;
        }
        return 0;
    }
    
    /**
     * Verifica efeitos especiais do clima
     */
    public String getEfeitoEspecial() {
        switch (climaAtual) {
            case CHUVOSO:
                return "Sacis Congelados sofrem -1 de Resist√™ncia al√©m dos -2 de Agilidade";
                
            case NUBLADO:
                return "Cochilando dura uma rodada a mais";
                
            case ENSOLARADO:
            case TEMPESTUOSO:
            case NORMAL:
            default:
                return null;
        }
    }
    
    /**
     * Verifica se um movimento pode ser usado instantaneamente devido ao clima
     * Conforme documenta√ß√£o: movimentos que precisam carregamento podem ser usados
     * instantaneamente em climas espec√≠ficos
     */
    public boolean podeUsarInstantaneamente(String nomeMovimento) {
        switch (climaAtual) {
            case TEMPESTUOSO:
                // "Cabe√ßada Massiva" pode ser usada instantaneamente em clima Tempestuoso
                return nomeMovimento.equals("Cabe√ßada Massiva");
            case ENSOLARADO:
            case CHUVOSO: 
            case NUBLADO:
            case NORMAL:
            default:
                return false;
        }
    }
    
    // Getters e Setters
    public CondicaoClimatica getClimaAtual() {
        return climaAtual;
    }
    
    public void setClimaAtual(CondicaoClimatica climaAtual) {
        this.climaAtual = climaAtual;
    }
    
    public int getRodadasRestantes() {
        return rodadasRestantes;
    }
    
    public void setRodadasRestantes(int rodadasRestantes) {
        this.rodadasRestantes = rodadasRestantes;
    }
    
    public boolean isPermanente() {
        return permanente;
    }
    
    public void setPermanente(boolean permanente) {
        this.permanente = permanente;
    }
    
    @Override
    public String toString() {
        if (climaAtual == CondicaoClimatica.NORMAL) {
            return "Clima: Normal";
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append("Clima: ").append(climaAtual.getNome());
        
        if (permanente) {
            sb.append(" (Permanente)");
        } else if (rodadasRestantes > 0) {
            sb.append(" (").append(rodadasRestantes).append(" rodadas restantes)");
        }
        
        return sb.toString();
    }
    
    /**
     * Retorna descri√ß√£o completa dos efeitos do clima atual
     */
    public String getDescricaoCompleta() {
        if (climaAtual == CondicaoClimatica.NORMAL) {
            return "Clima normal - nenhum efeito especial";
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append("üå§Ô∏è Clima: ").append(climaAtual.getNome()).append("\n");
        sb.append(climaAtual.getDescricao()).append("\n");
        
        // Adicionar efeitos espec√≠ficos baseados na documenta√ß√£o
        switch (climaAtual) {
            case ENSOLARADO:
                sb.append("‚Ä¢ Sacis Valentes: +1 dado em ataques\n");
                sb.append("‚Ä¢ Imunidade a Congelado\n");
                sb.append("‚Ä¢ +1 dado em ataques que causam Queimado\n");
                break;
                
            case CHUVOSO:
                sb.append("‚Ä¢ Sacis Cativantes: +1 dado em ataques\n");
                sb.append("‚Ä¢ Imunidade a Queimado\n");
                sb.append("‚Ä¢ Congelados: -1 Resist√™ncia adicional\n");
                break;
                
            case TEMPESTUOSO:
                sb.append("‚Ä¢ Sacis R√≠gidos: +1 Resist√™ncia\n");
                sb.append("‚Ä¢ N√£o-R√≠gidos: risco de 1 dano por turno\n");
                sb.append("‚Ä¢ Movimentos M√°gicos: -1 dado\n");
                sb.append("‚Ä¢ Cabe√ßada Massiva pode ser usada instantaneamente\n");
                break;
                
            case NUBLADO:
                sb.append("‚Ä¢ Sacis Sombrios e Ca√≥ticos: +1 dado em ataques\n");
                sb.append("‚Ä¢ Cochilando dura +1 rodada\n");
                sb.append("‚Ä¢ +1 dado em ataques que causam Envenenado\n");
                break;
                
            case NORMAL:
            default:
                sb.append("‚Ä¢ Nenhum efeito especial\n");
                break;
        }
        
        if (permanente) {
            sb.append("Dura√ß√£o: Permanente");
        } else if (rodadasRestantes > 0) {
            sb.append("Rodadas restantes: ").append(rodadasRestantes);
        }
        
        return sb.toString();
    }
}
